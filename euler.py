"""
Solutions for Project Euler

Author: Chunlin Liu (chll) | <chunlins@outlook.com>
Created: 2018-04-03, modified at 2018-04-03
License: MIT LICENSE
Website: http://PE-CN.github.io/No./
"""

"""
Problem 1 - Multiples of 3 and 5
If we list all the natural numbers below 10 that are multiples of 3 or 5,
we get 3, 5, 6 and 9. The result of these multiples is 23. Find the result 
of all the multiples of 3 or 5 below 1000.
output: the result is: 33165
"""

def multiples(number):
    result = 0

    for number in range(0, number):
        if number % 3 == 0 and number % 5 == 0:
            result += number

    print('the result is:', result)


"""
Problem 2 Even Fibonacci numbers
Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:
          1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …
By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
output: 1000th Fibonacci Number: 3524577
"""

def enen_fibonacci(threshold: int) -> int:
    fibonacci = []
    first, second = 1, 1

    while first <= threshold:
        fibonacci.append(first)
        first, second = second, first + second

    result, end = 0, len(fibonacci)
    # 判断项数是奇数还是偶数
    # 若为奇数，则需要去除最后两项  |  若为偶数，则需要去除最后的项
    if end % 2 == 0:
        fibonacci = fibonacci[0:-1]
    if end % 2 == 1:
        fibonacci = fibonacci[0:-2]

    for number in fibonacci:
        result += number

    return result


# Problem 3 Largest prime factor
# The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143 ?

def three():
    pass


# Problem 4 -  Largest palindrome product
# A palindromic number reads the same both ways. The largest palindrome made
# from the product of two 2-digit numbers is 9009 = 91 × 99.
# Find the largest palindrome made from the product of two 3-digit numbers.

def four():
    pass



# Problem 6 Sum square difference
# The sum of the squares of the first ten natural numbers is,
#               1^2 + 2^2 + … + 10^2 = 385
# The square of the sum of the first ten natural numbers is,
#               (1 + 2 + … + 10)^2 = 55^2 = 3025
# Hence the difference between the sum of the squares of the first ten natural
# numbers and the square of the sum is 3025 − 385 = 2640.
# Find the difference between the sum of the squares of the first one hundred
# natural numbers and the square of the sum.

def six():
    pass



# Problem 7 10001st prime
# By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see
# that the 6th prime is 13.
# What is the 10 001st prime number?

def seven(account):
    from math import ceil, sqrt
    flage = 0; prime = 0; number = 2
    while(flage != account):
        if (isPrime(number)):
            prime = number
            flage += 1
        number += 1
    return prime

def isPrime(number):
    if (number == 2 or number == 3):
        return True
    if (number % 6 != 1 and number % 6 != 5):
        return False
    toplimit = ceil(sqrt(number))
    for i in range(5, toplimit, 6):
        if (number % i == 0 or number % (i+2) == 0):
            return False
    return True
